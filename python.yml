parameters:
  - name: imageName
    type: string
  - name: imageTag
    type: string
  - name: sourcePath
    type: string
    default: "src"
  - name: pythonVersion
    type: string
    default: "3.10"

stages:
  - stage: init
    displayName: Init
    jobs:
      - job:
        steps:
          - script: |
              echo "Working"
  - stage: docker
    displayName: Build Docker Images
    dependsOn: init
    jobs:
      - job:
        steps:
          - script: |
              sed -i "s/{{version}}/$(build.BuildNumber)/" Dockerfile
            displayName: Set version Env
          - task: Docker@2
            displayName: Docker Build
            inputs:
              command: build
              repository: $(imageName)
              arguments: --no-cache
              tags: |
                $(imageTag)
          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                docker image save -o $(Build.SourcesDirectory)/image.tar $(imageName):$(imageTag)
          - task: CopyFiles@2
            displayName: 'Copy Files images'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)'
              Contents: 'image.tar'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
              CleanTargetFolder: true
              preserveTimestamp: true
          - script: |
              sed -i "s/latest/$(imageTag)/" ./deploy/definition.yaml
            displayName: 'Set version in Kubernetes definition'
          - script: |
              sed -i "s/imageName/$(imageName)/" ./deploy/definition.yaml
            displayName: 'Set image name in Kubernetes definition'
          - task: CopyFiles@2
            displayName: 'Copy Files kubernetes definition'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)/deploy'
              Contents: '*'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
              CleanTargetFolder: false
              preserveTimestamp: true
          - script: |
              echo $(imageName):$(imageTag) > $(Build.ArtifactStagingDirectory)/tag.txt
            displayName: 'Save tag to get in release pipeline'
          - bash: 'cd $(Build.ArtifactStagingDirectory) && ls -la'
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'image-$(imageName)'
  - stage: test
    displayName: Test
    dependsOn: init
    jobs:
      - job:
        continueOnError: true
        steps:
          - script: pip install -r ${{parameters.sourcePath}}/requirements.txt
            displayName: Install dependencies
  - stage:
    dependsOn: ['docker']
    displayName: Publish Artifact
    jobs:
      - job:
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              source: 'current'
              artifact: 'image-$(imageName)'
              path: '$(Build.ArtifactStagingDirectory)'
          - bash: 'cd $(Build.ArtifactStagingDirectory) && ls -la'
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: '$(imageName)'
